<%
function printParams() {
    var params = [];
    for (var j = 0; j < op.accepts.length; j++) {
        var param = op.accepts[j];
        var type = param.type || '*';
        if (Array.isArray(param.type)) {
            type = param.type[0] + '[]';
        }
        params.push(' * @param {' + type + '} ' + param.arg + ' ' + param.description);
    }
    return params.join('\n');
}


function printMethod(modelName) {
    var className = modelName || 'Model';
    var method = className + '.' + op.operationId
            + ' = function(';
    var params = op.accepts.map(function(a) {
        return a.arg;
    });
    params.push('callback');
    return method + params.join(', ') + ') {';
}

function printRequestArgsOld() {
    var requestArgs;
    for (var j = 0; j < op.accepts.length; j++) {
        var param = op.accepts[j];
        if (j != 0) {
            requestArgs = requestArgs + ",";
        }
        requestArgs = param.arg + ": " + param.arg;
    }
    requestArgs = "{\n" + "             " + requestArgs + "\n        }";
    return requestArgs;
}

function printRequestArgs() {
    var requestArgs;
    for (var j = 0; j < op.accepts.length; j++) {
        var param = op.accepts[j];
        if (j != 0) {
            requestArgs = requestArgs + ",";
        }
        requestArgs =  param.arg;
    }
    return requestArgs;
}
%>
var soap = require('strong-soap').soap;

module.exports = function(<%- modelName || 'Model' %>) {
<%
var i;
for(var i = 0; i < operations.length; i++) {
    var op = operations[i];
%>
/**
* <%- op.description || op.summary || op.operationId %>
<%- printParams() %>
* @callback {Function} callback Callback function
* @param {<%- op.returnType %>} result is callback containing error or result. Result is the response/soap body in JSON form.
*/
<%- printMethod(modelName) %>
    soap.createClient('<%- webServiceInfo.url %>', {}, function(err, client) {
        var requestArgs = <%- printRequestArgs() %>;
        var method = client['<%- webServiceInfo.service %>']['<%- webServiceInfo.binding %>']['<%- op.operationId %>'];
        method(<%- printRequestArgs() %>, function (err, result, envelope, soapHeader) {
            //'result' is the response/soap body in JSON form and 'envelope' is response soap envelope in XML form
            console.log('Result: \n' + JSON.stringify(result));
            callback(err, result);
        });
    });
<% } %>
}

// Map to REST/HTTP
<%
for(i = 0; i < operations.length; i++) {
    var op = operations[i];
%>
<%- modelName || 'Model' %>.remoteMethod('<%- op.operationId %>',
<%- op.printRemoting() %>
);
<% } %>
}
